[dir]
## Input data directories
## This is the location of your input files for METplus

PROJ_DIR = /d1/minnawin/skunk
TMP_DIR = /d1/minnawin/skunk/tmp
OUTPUT_BASE = /d1/minnawin/skunk
METPLUS_BASE = /home/minnawin/wip/METplus
MET_BUILD_BASE = /usr/local/met-6.1
MET_INSTALL_DIR = /usr/local/met-6.1
PARM_BASE = /home/minnawin/wip/METplus/parm

#
# PB2NC
#
# this is the name of model (and subdir to PREPBUFR_DATA_DIR)
# ex: nam for NAM or gdas for GDAS dir
PREPBUFR_MODEL_DIR_NAME = nam
PB2NC_OUTPUT_DIR = {OUTPUT_BASE}/{PREPBUFR_MODEL_DIR_NAME}/conus_sfc

## Used with OUTPUT_BASE to create the output directory from PB2NC
PREPBUFR_DATA_DIR = /d1/METplus_Mallory/data/prepbufr

#
# POINT_STAT
#
# Forecast and Obs file input directories (netCDF files)
FCST_INPUT_DIR = /d1/METplus_Mallory/data/gfs
OBS_INPUT_DIR = /d1/METplus_Mallory/output_for_testing/grid2obs_metplustest.2/prepbufr

# Final output directory for point_stat output
POINT_STAT_OUTPUT_DIR = {OUTPUT_BASE}/{OBS_NAME}

[config]
## Configuration-related settings such as the process list, begin and end times, etc.
PROCESS_LIST = PB2NC, PointStat

[config]
## LOOP_METHOD
## Options are: processes, times
## Looping by time- runs all items in the PROCESS_LIST for each
## initialization time and repeats until all times have been evaluated.
## Looping by processes- run each item in the PROCESS_LIST for all
## specified initialization times then repeat for the next item in the
## PROCESS_LIST.
LOOP_METHOD = processes

# Logging levels: DEBUG, INFO, WARN, ERROR (most verbose is DEBUG)
LOG_LEVEL = DEBUG

## OVERWRITE OPTIONS
## Don't overwrite files if they already exist.
## Set to no if you do NOT want to override existing files
## Set to yes if you do want to override existing files
OVERWRITE_NC_OUTPUT = yes

# Time method by which to perform validation, either by init time or by valid
# time. Indicate by either BY_VALID or BY_INIT
TIME_METHOD = BY_VALID

## MET Configuration files for pb2nc and point_stat
PB2NC_CONFIG_FILE = {PARM_BASE}/met_config/PB2NCConfig_conus_sfc
POINT_STAT_CONFIG_FILE ={PARM_BASE}/met_config/PointStatConfig_conus_sfc

# For processing by init time or valid time, indicate the start and end hours
# in HH format
START_HOUR = 00
END_HOUR = 23

# Indicate the begin and end date, and interval (in hours)
BEG_TIME = 20170601
END_TIME = 20170603
# Used by pb2nc
INTERVAL_TIME = 24

# start and end dates are created by combining the date with
# start and end hours (format can be hh, hhmm, or hhmmss.
START_DATE = {BEG_TIME}{START_HOUR}
END_DATE = {END_TIME}{END_HOUR}

# Either conus_sfc or upper_air
VERTICAL_LOCATION = conus_sfc

#
# PB2NC
#
# These are appended with PB2NC to differentiate the GRID, POLY, and MESSAGE_TYPE for point_stat.
PB2NC_GRID =
PB2NC_POLY =
PB2NC_STATION_ID =
PB2NC_MESSAGE_TYPE =

# Leave empty to process all
OBS_BUFR_VAR_LIST = PMO, TOB, TDO, UOB, VOB, PWO, TOCC, D_RH

#***********
# ***NOTE***
#***********
# SET TIME_SUMMARY_FLAG to False. There is a bug in met-6.1.
## For defining the time periods for summarization
# False for no time summary, True otherwise
TIME_SUMMARY_FLAG = False
TIME_SUMMARY_BEG = 000000  ;; start time of time summary in HHMMSS format
TIME_SUMMARY_END = 235959  ;; end time of time summary in HHMMSS format
TIME_SUMMARY_VAR_NAMES = PMO,TOB,TDO,UOB,VOB,PWO,TOCC
TIME_SUMMARY_TYPES = min, max, range, mean, stdev, median, p80  ;; a list of the statistics to summarize

# For both pb2nc and point_stat, the obs_window dictionary:
OBS_WINDOW_BEG = -2700
OBS_WINDOW_END = 2700


#
# POINT_STAT
#
# Forecast hour start, end, and interval. Interval is the forecast interval in
# hours.
FCST_HR_START = 0
FCST_HR_END =  120
FCST_HR_INTERVAL = 24

# Model/fcst and obs name, e.g. GFS, NAM, GDAS, etc.
MODEL_NAME = gfs
OBS_NAME = nam

# Regrid to specified grid.  Indicate NONE if no regridding, or the grid id
# (e.g. G212)
REGRID_TO_GRID = G104

# Verification Masking regions
# Indicate which grid and polygon masking region, if applicable
POINT_STAT_GRID = FULL
# List of full path to poly masking files.  NOTE: Only short lists of poly
# files work (those that fit on one line), a long list will result in an
# environment variable that is too long, resulting in an error.  For long
# lists of poly masking files (i.e. all the mask files in the NCEP_mask
# directory), define these in the MET point_stat configuration file.
POINT_STAT_POLY =
POINT_STAT_STATION_ID =

# Message types, if all message types are to be returned, leave this empty,
# otherwise indicate the message types of interest.
POINT_STAT_MESSAGE_TYPE = ONLYSF
# Variables and levels as specified in the field dictionary of the MET
# point_stat configuration file. Specify as FCST_VARn_NAME, FCST_VARn_LEVELS,
# (optional) FCST_VARn_OPTION

FCST_VAR1_NAME = TMP
FCST_VAR1_LEVELS = Z2

FCST_VAR2_NAME = RH
FCST_VAR2_LEVELS = Z2

FCST_VAR3_NAME = DPT
FCST_VAR3_LEVELS = Z2

FCST_VAR4_NAME = UGRD
FCST_VAR4_LEVELS = Z10

FCST_VAR5_NAME = VGRD
FCST_VAR5_LEVELS = Z10

FCST_VAR6_NAME = TCDC
FCST_VAR6_LEVELS = L0
FCST_VAR6_OPTIONS = GRIB_lvl_typ = 200

FCST_VAR7_NAME = PRMSL
FCST_VAR7_LEVELS = Z0

#
##  FILENAME TEMPLATES
#
[filename_templates]
## Output file template
#
# PB2NC
#
# For NAM
NC_FILE_TMPL = prepbufr.nam.{init?fmt=%Y%m%d}.t{cycle?fmt=%HH}z.tm{offset?fmt=%HH}.nc


#
## REGEX PATTERN
#
[regex_pattern]
#
# PB2NC
#
## Define prepBUFR input directory and filename patterns, place parenthesis
## around any YMD, cycle time, and offset (fhr)
PREPBUFR_DIR_REGEX = .*nam.(2[0-9]{7})
PREPBUFR_FILE_REGEX = .*nam.t([0-9]{2})z.prepbufr.tm([0-9]{2})

#
# POINT_STAT
#
# Regular expressions for files relevant to this use case. Use parentheses
# around any date, cycle and offset time.
OBS_INPUT_FILE_REGEX = .*prepbufr.nam.(2[0-9]{7}).t([0-9]{2})z.tm([0-9]{2}).nc
FCST_INPUT_FILE_REGEX = .*pgbf([0-9]{1,3}).gfs.(2[0-9]{9})
